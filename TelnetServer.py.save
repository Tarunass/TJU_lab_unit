import socket, threading
import getpass
import telnetlib
import time
import logging

HOST = '192.168.1.3'
PORT = 51234

CONTROL_SERVER_ADDRESS = ('192.168.1.3', 60000)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((HOST, PORT))
s.listen(4)
clients = []  # list of clients connected
lock = threading.Lock()
KeyPushTimes = 0
KeyPad_EN = False

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


class ChatServer(threading.Thread):
    def __init__(self, (socket, address)):
        threading.Thread.__init__(self)
        self.logger = logging.getLogger(__name__)
        self.socket = socket
        self.address = address
        self.tn = telnetlib.Telnet("192.168.1.6", "23")
        self.tn.write("admin\n")
        self.tn.write("LESA2018\n")

    def run(self):
        global KeyPushTimes
        global KeyPad_EN

        lock.acquire()
        clients.append(self)
        lock.release()

        self.logger.info('%s:%s connected. ' % self.address)
        while True:
            data = self.socket.recv(1024)
            if not data:
                break
            self.logger.info(data)
            if data == "KEYPAD_EN":
                self.logger.debug(KeyPushTimes)
                KeyPushTimes += 1
                if KeyPushTimes == 4:
                    self.logger.info("Keypad is enabled")
                    try:
                        s_control = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                        s_control.connect(CONTROL_SERVER_ADDRESS)
                        s_control.send('demo')
                        s_control.close()
                    except socket.error as e:
                        self.logger.error(e)
                    KeyPad_EN = True
                    self.tn.write("LEDBLUES 99\n")
                    KeyPushTimes = 0
            elif data == "KEYPAD_DIS" and KeyPad_EN == True:
                #	print KeyPushTimes
                #	if KeyPushTimes > 1:
                #		KeyPushTimes = KeyPushTimes - 1
                #	if KeyPushTimes <= 1:
                KeyPad_EN = False
                self.logger.info("Keypad is disabled")
                try:
                    s_control = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    s_control.connect(CONTROL_SERVER_ADDRESS)
                    s_control.send('stop')
                    s_control.close()
                except socket.error as e:
                    self.logger.error(e)
                self.tn.write("LEDBLUES 0\n")
                self.tn.write("LEDREDS 0\n")
                KeyPushTimes = 0
            elif (data == "CCT_UP") and (KeyPad_EN == True):
                self.logger.info("CCT UP now is active")
                self.tn.write("LEDBLUES 5\n")
                time.sleep(0.1)
                self.tn.write("LEDREDS 0\n")
                time.sleep(0.1)
                self.tn.write("LEDRED 1 100\n")
                time.sleep(1)
                self.tn.write("LEDREDS 0\n")
                time.sleep(0.1)
                self.tn.write("LEDBLUES 99\n")

            elif (data == "CCT_DOWN") and (KeyPad_EN == True):
                self.logger.info("CCT DOWN now is active")
                self.tn.write("LEDBLUES 5\n")
                time.sleep(0.1)
                self.tn.write("LEDREDS 0\n")
                time.sleep(0.1)
                self.tn.write("LEDRED 5 99\n")
                time.sleep(1)
                self.tn.write("LEDREDS 0\n")
                time.sleep(0.1)
                self.tn.write("LEDBLUES 99\n")

            else:
                self.tn.write("LEDBLUES 0\n")
                time.sleep(0.1)
                self.tn.write("LEDREDS 0\n")
                time.sleep(0.1)

        self.socket.close()
        self.logger.info('%s:%s disconnected. ' % self.address)
        lock.acquire()
        clients.remove(self)
        lock.release()

if __name__ == "__main__":
    while True:  # wait for socket to connect
        ChatServer(s.accept()).start()
